/**
 * @file tree.c
 * @author Christopher Bove (cpbove)
 * @date 27 April 2015
 * @brief C source code for tree functions
 *
 * Includes Tnode struct for storing trees and functions to add and print them
 */

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "tree.h"

/** adds a node to the tree
 *  in ascending order
 * @param current_tnode pointer to existing node
 * @param value string that the node should have
 * @return Pointer to the root of the updated tree
 */
Tnode *add_tnode(Tnode *current_tnode, char* value) {
  if(current_tnode == NULL) {// if pointer is null
    Tnode *node; // Holds pointer to the newly-allocated node
    node = (Tnode *) malloc(sizeof(Tnode)); // allocate new node
    node->value = value; // put value into the new parent
    // set both children to be NULL
    node->left = NULL;
    node->right = NULL;
    return node; // return ptr to newly allocated node
  }
  else {// if pointer not null
    // compare new value to value in the node
    if( strcasecmp(value, current_tnode->value) <= 0) { // value is less than node val
      // so val is higher than node val
      
      // if there is no left child, than new node becomes left child]
      if (current_tnode->left == NULL) {
        Tnode *left_node = (Tnode *) malloc(sizeof(Tnode)); // allocate new node
        current_tnode->left = left_node; // put value into the new
        current_tnode->left->value = value;
      }
      // otherwise, pass new node to left child
      else
        add_tnode(current_tnode->left, value);
      
      return current_tnode;
    }
    else {
      // so val is lower than node val
      if (current_tnode->right == NULL) {
        Tnode *right_node = (Tnode *) malloc(sizeof(Tnode)); // allocate new node
        current_tnode->right = right_node; // put value into the new
        current_tnode->right->value = value;
      }
      // otherwise, pass new node to left child
      else
        add_tnode(current_tnode->right, value);

      return current_tnode;
    }
    // do this function recursively on either left or right child
    // return value returned by function.
  }
}

/** prints nodes of tree in ascending order
 * @param current_tnode pointer to existing node
 */
void print_tnode(Tnode *current_tnode) {
  if(current_tnode == NULL) {// if pointer is null
    // print nothing or null statement
    //printf("NULL\n");
  }
  else {
    // print all on left
    print_tnode(current_tnode->left);
    // print this one
    printf("%s\n", current_tnode->value);
    // print all on right
    print_tnode(current_tnode->right);
  }
}

/** traverses tree and frees all the nodes
 *  in ascending order
 * @param current_tnode pointer to existing node
 */
void free_nodes(Tnode *current_tnode) {
  // if we are the end
  if (current_tnode == NULL) {
    // do nothing - this is already null
  }
  else {
    // free all on left
    free_nodes(current_tnode->left);
    // free all on right
    free_nodes(current_tnode->right);
    // free this one last
    free(current_tnode);
  }
  
}
